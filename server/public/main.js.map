{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/global-query.ts","webpack:///./src/app/graphql.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"jumbotron\\\">\\r\\n    <h1>GraphQL, NodeJs, Express, MongoDB, Angular (v6)</h1>      \\r\\n  </div>\\r\\n  <div class=\\\"col-md-12\\\">\\r\\n    <div class=\\\"row pb-5\\\">\\r\\n      <div class=\\\"col-md-6 float-left\\\">\\r\\n      </div>\\r\\n      <div class=\\\"col-md-6 float-right\\\">\\r\\n        <!-- Create New User  -->\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary pull-right\\\" (click)=\\\"openModal(template)\\\">\\r\\n        Add Employee  <span class=\\\"lnr lnr-plus-circle\\\"></span>\\r\\n        </button>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Modal Template of New User Form -->\\r\\n    <ng-template #template>\\r\\n      <div class=\\\"modal-header\\\">\\r\\n        <h4 class=\\\"modal-title pull-left\\\">Add New Employee</h4>\\r\\n        <button type=\\\"button\\\" class=\\\"close pull-right\\\" aria-label=\\\"Close\\\" (click)=\\\"modalRef.hide()\\\">\\r\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n        </button>\\r\\n      </div>\\r\\n      <div class=\\\"modal-body\\\">\\r\\n        <form>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"name\\\">Emp Name</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"name\\\"  placeholder=\\\"First Name\\\" [(ngModel)]=\\\"name\\\">\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"lname\\\">Emp Last Name</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"lname\\\"  placeholder=\\\"Last Name\\\" [(ngModel)]=\\\"lname\\\">\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"address\\\">Emp Address</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"address\\\"  placeholder=\\\"Address\\\" [(ngModel)]=\\\"address\\\">\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"phone\\\">Phome</label>\\r\\n            <input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"phone\\\"  placeholder=\\\"Phone\\\" [(ngModel)]=\\\"phone\\\">\\r\\n          </div>\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" *ngIf=\\\"!user.id\\\" (click)=\\\"createUser(name, lname, address, phone);\\\">Create</button>\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-default\\\" *ngIf=\\\"user.id\\\" (click)=\\\"updateUser(name);\\\">Update</button>\\r\\n        </form>\\r\\n      </div>\\r\\n    </ng-template>\\r\\n\\r\\n    <!-- List of All Users  -->\\r\\n  \\r\\n    <table class=\\\"table table-bordered table-striped table-hover\\\">\\r\\n      <thead >\\r\\n        <tr>\\r\\n          <th class=\\\"text-center table-primary\\\">Emp Id</th>\\r\\n          <th class=\\\"text-center\\\">Emp First Name</th>\\r\\n          <th class=\\\"text-center\\\">Emp Last Name</th>\\r\\n          <th class=\\\"text-center\\\">Emp Address</th>\\r\\n          <th class=\\\"text-center\\\">Emp Phone</th>\\r\\n          <th class=\\\"text-center\\\">Edit</th>\\r\\n          <th class=\\\"text-center\\\">Delete</th>\\r\\n        </tr>\\r\\n      </thead>\\r\\n      <tbody>\\r\\n        <tr *ngFor=\\\"let user of users; let i = index\\\">\\r\\n          <td class=\\\"table-info\\\">{{ i+1 }}</td>\\r\\n          <td class=\\\"table-warning\\\">{{ user.name }}</td>\\r\\n          <td class=\\\"table-success\\\">{{user.lname}}</td>\\r\\n          <td class=\\\"table-success\\\">{{user.address}}</td>\\r\\n          <td class=\\\"table-success\\\">{{user.phone}}</td>\\r\\n          <td  class=\\\"table-success\\\">\\r\\n            <!-- Show Edit User Form  -->\\r\\n            <button class=\\\"btn btn-dark \\\" (click)=\\\"showEditUserForm(user, template)\\\">\\r\\n              <span class=\\\"lnr lnr-pencil\\\"></span>\\r\\n            </button>\\r\\n          </td>\\r\\n           <td class=\\\"table-danger\\\">\\r\\n            <!-- Remove User  -->\\r\\n            <button class=\\\"btn btn-danger\\\" (click)=\\\"removeUser(user.id)\\\">\\r\\n              <span class=\\\"lnr lnr-trash\\\"></span>\\r\\n            </button>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </tbody>\\r\\n    </table>\\r\\n  </div>\\r\\n</div>\"","module.exports = \".container tr {\\n  text-align: center; }\\n\"","import { Component, TemplateRef } from '@angular/core';\r\nimport { Apollo } from 'apollo-angular';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BsModalService } from 'ngx-bootstrap/modal';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\r\nimport * as Query from './global-query';\r\nimport 'rxjs/add/operator/map';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  modalRef: BsModalRef;\r\n  users: Array<any> = []; // List of Users\r\n  user: any = {};\r\n  name: any;\r\n  lname:any;\r\n  address:any;\r\n  phone:any;\r\n\r\n  constructor(private apollo: Apollo,\r\n    private modalService: BsModalService) { }\r\n  ngOnInit() {\r\n    this.getUsers();\r\n  }\r\n  /**\r\n   * Create User\r\n   * @param value     Name of User\r\n   */\r\n  createUser(value, value2, value3, value4) {\r\n    this.apollo.mutate({\r\n        mutation: Query.addUser,\r\n        variables: {\r\n          name: value,\r\n          lname: value2,\r\n          address: value3,\r\n          phone: value4\r\n        },\r\n        update: (proxy, { data: { addUser } }) => {\r\n          // Read the data from our cache for this query.\r\n          const data: any = proxy.readQuery({ query: Query.Users });\r\n\r\n          data.users.push(addUser);\r\n\r\n          // Write our data back to the cache.\r\n          proxy.writeQuery({ query: Query.Users, data });\r\n        }\r\n      })\r\n      .subscribe(({ data }) => {\r\n        this.closeFirstModal(); // Close Modal\r\n      }, (error) => {\r\n        console.log('there was an error sending the query', error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Remove User\r\n    * @param id \r\n   */\r\n  removeUser(id) {\r\n    this.apollo.mutate({\r\n        mutation: Query.removeUser,\r\n        variables: {\r\n          id: id\r\n        },\r\n        update: (proxy, { data: { removeUser } }) => {\r\n          // Read the data from our cache for this query.\r\n          const data: any = proxy.readQuery({ query: Query.Users });\r\n          var index = data.users.map(function (x) { return x.id; }).indexOf(id);\r\n\r\n          data.users.splice(index, 1);\r\n\r\n          // Write our data back to the cache.\r\n          proxy.writeQuery({ query: Query.Users, data });\r\n        }\r\n      })\r\n      .subscribe(({ data }) => {\r\n        console.log(data)\r\n      }, (error) => {\r\n        console.log('there was an error sending the query', error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Edit User Form\r\n   * @param user \r\n   * @param template \r\n   */\r\n  showEditUserForm(user, template) {\r\n    this.name = user.name;\r\n    this.lname = user.lname;\r\n    this.address = user.address;\r\n    this.phone = user.phone;\r\n    this.user = user;\r\n    this.modalRef = this.modalService.show(template);\r\n  }\r\n\r\n  /**\r\n   * Update User\r\n   * @param user \r\n   */\r\n  updateUser(user) {\r\n    this.apollo.mutate({\r\n        mutation: Query.updateUser,\r\n        variables: {\r\n          id: this.user.id,\r\n          name: user,\r\n          lname: user,\r\n          address: user,\r\n           phone: user,\r\n        },\r\n        update: (proxy, { data: { updateUser } }) => {\r\n          // Read the data from our cache for this query.\r\n          const data: any = proxy.readQuery({ query: Query.Users });\r\n\r\n          var index = data.users.map(function (x) { return x.id; }).indexOf(this.user.id);\r\n\r\n          data.users[index].name = user;\r\n          data.users[index].lname = user;\r\n          data.users[index].address = user;\r\n          data.users[index].phone = user;\r\n\r\n\r\n          // Write our data back to the cache.\r\n          proxy.writeQuery({ query: Query.Users, data });\r\n        }\r\n      })\r\n      .subscribe(({ data }) => {\r\n        this.closeFirstModal();\r\n      }, (error) => {\r\n        console.log('there was an error sending the query', error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * ----------------------------------------------------\r\n   * Get All Users\r\n   * ----------------------------------------------------\r\n   * @method getUsers\r\n   */ \r\n  getUsers() {\r\n    this.apollo.watchQuery({ query: Query.Users })\r\n      .valueChanges\r\n      .map((result: any) => result.data.users).subscribe((data) => {\r\n        this.users = data;\r\n      })\r\n  }\r\n\r\n  // Open Modal\r\n  openModal(template: TemplateRef<any>) {\r\n    this.name = '';\r\n    this.lname = '';\r\n    this.address = '';\r\n    this.phone = '';\r\n    this.user = {};\r\n    this.modalRef = this.modalService.show(template);\r\n  }\r\n\r\n  // Close Modal\r\n  closeFirstModal() {\r\n    this.modalRef.hide();\r\n    this.modalRef = null;\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppComponent } from './app.component';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\n// Apollo\r\nimport { GraphQLModule } from './graphql.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule, // provides HttpClient for HttpLink\r\n    GraphQLModule,\r\n    FormsModule,\r\n    ModalModule.forRoot()\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","/**\r\n * Server Mutation Query\r\n */\r\n\r\n'use strict';\r\n\r\nimport gql from 'graphql-tag';\r\n\r\nexport const addUser = gql`\r\n  mutation addUser($name: String!, $lname: String!, $address: String!, $phone: String!) {\r\n    addUser(name: $name, lname: $lname, address: $address, phone: $phone) {\r\n      id\r\n      name\r\n      lname\r\n      address\r\n      phone\r\n      \r\n    }\r\n  }`;\r\n\r\nexport const Users = gql`\r\n  query {\r\n    users{\r\n      id\r\n      name\r\n      lname\r\n      address\r\n      phone\r\n    }\r\n  }`;\r\n\r\nexport const removeUser = gql`\r\n  mutation removeUser($id: String!) {\r\n    removeUser(id: $id) {\r\n      id\r\n      name\r\n      lname\r\n      address\r\n      phone\r\n    }\r\n  }`;\r\n\r\nexport const updateUser = gql`\r\n  mutation updateUser($id: String!, $name: String!, $lname: String!, $address: String!, $phone:String!) {\r\n    updateUser(id: $id, name: $name, lname: $lname, address: $address, phone: $phone) {\r\n      id\r\n      name\r\n      lname\r\n      address\r\n      phone\r\n    }\r\n  }`;","import { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n// Apollo\r\nimport { ApolloModule, Apollo } from 'apollo-angular';\r\nimport { HttpLinkModule, HttpLink } from 'apollo-angular-link-http';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\n\r\n const uri = 'http://localhost:4000/graphql'; // Development\r\n//const uri = 'https://graphql-demo-vijaychauhanssn.herokuapp.com/graphql'; // Production\r\n\r\n@NgModule({\r\n  exports: [\r\n    HttpClientModule,\r\n    ApolloModule,\r\n    HttpLinkModule\r\n  ]\r\n})\r\nexport class GraphQLModule {\r\n  constructor(\r\n    apollo: Apollo,\r\n    httpLink: HttpLink\r\n  ) {\r\n    // create Apollo\r\n    apollo.create({\r\n      link: httpLink.create({ uri }),\r\n      cache: new InMemoryCache()\r\n    });\r\n  }\r\n}","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}